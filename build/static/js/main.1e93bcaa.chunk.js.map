{"version":3,"sources":["components/Card.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","id","onClick","e","handleGameLogic","target","parentNode","src","image","alt","name","Game","useState","currentScore","setCurrentScore","highScore","setHighScore","teamsArr","setTeamsArr","teams","newTeams","setNewTeams","gameOver","setGameOver","reset","console","log","sort","a","b","parseFloat","handleHighScore","includes","prevArr","addToTeamsArr","alert","shuffleArray","array","i","length","j","Math","floor","random","map","team","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e93bcaa.chunk.js","sourcesContent":["// Card.js\n\nimport {React} from 'react'\n\nconst Card = (props) => {\n    return (\n        <div className=\"team-logo-card\" id={props.id} onClick={(e) => props.handleGameLogic(e.target.parentNode.id)}>\n            <img className=\"team-logo\" src={props.image} alt={\"Logo for the \"+props.name}></img>\n            <p>{props.name}</p>\n        </div>\n    );\n};\n\nexport default Card;","import {React, useState} from 'react';\nimport Card from './Card';\nimport teams from '../teams.json';\n\nconst Game = () => {\n    const [currentScore, setCurrentScore] = useState(0);\n    const [highScore, setHighScore] = useState(0);\n    const [teamsArr, setTeamsArr] = useState([]);\n    const [newTeams, setNewTeams] = useState(teams);\n    const [gameOver, setGameOver] = useState(false);\n\n    const incrementScore = () => {\n        if (currentScore === 32) // win at 32\n        {\n            alert('You won!');\n            setGameOver(true);\n            handleHighScore();\n        }\n        else \n        {\n            setCurrentScore(currentScore+1);\n        }\n        console.log(currentScore)\n    }\n\n    const addToTeamsArr = (id) => {\n        setTeamsArr((prevArr) => [...prevArr, id])\n        console.log(teamsArr);\n    }\n\n    const reset = () => {\n        setCurrentScore(0);\n        setGameOver(false);\n        setTeamsArr([]);\n        console.log(teams)\n        setNewTeams(teams.sort((a, b) => parseFloat(a.id) - parseFloat(b.id)));\n    };\n\n    const handleHighScore = () => {\n        if (currentScore >= highScore) {\n            setHighScore(currentScore)\n        }\n    };\n    \n\n    const handleGameLogic = (id) => {\n        \n        if (!teamsArr.includes(id) && !gameOver) \n        {\n            addToTeamsArr(id);\n            incrementScore();\n            console.log(currentScore+1)\n           if (currentScore <= 31) {\n                setNewTeams(shuffleArray(newTeams));\n           }\n        } else {\n            handleHighScore();\n            reset();\n        }\n    };\n\n    const shuffleArray = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n\n\n    return(\n        gameOver ?\n        <div>\n          <div className=\"scores\">Current Score: {currentScore} High Score: {highScore}Max Score: 32</div>\n            <button onClick={reset}>Click to replay!</button>\n            <div className=\"team-logos\">\n            {newTeams.map(team => (\n            <Card\n                id={team.id}    \n                key={team.id} \n                image={team.image}\n                name={team.name}\n                handleGameLogic={handleGameLogic}\n          />\n          ))}\n          </div>\n          </div>: \n          <div>\n          <div className=\"scores\"><text>Current Score: {currentScore}</text><text>High Score: {highScore}</text><text>Max Score: 32</text></div>\n          <div className=\"team-logos\">\n          {teams.map(team => (\n            <Card\n              id={team.id}    \n              key={team.id} \n              image={team.image}\n              name={team.name}\n              handleGameLogic={handleGameLogic}\n            />\n            ))}\n          </div>\n          </div>\n          );\n};\n\nexport default Game;","import './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header><img id=\"logo\" src=\"https://upload.wikimedia.org/wikipedia/en/a/a2/National_Football_League_logo.svg\" alt=\"nfl-logo\"></img><text>NFL Team Memory Card Game</text></header>\n      <div className=\"subheader\">\n        <div className=\"instructions\">Get points by clicking on different logo each time... max score is 32!</div>\n        <Game></Game>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}